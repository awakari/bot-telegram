apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "bot-telegram.fullname" . }}
  labels:
    {{- include "bot-telegram.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "bot-telegram.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "bot-telegram.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "bot-telegram.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          env:
            {{- range .Values.ingress.hosts }}
            - name: API_TELEGRAM_WEBHOOK_HOST
              value: {{ .host }}
            {{- range .paths }}
            - name: API_TELEGRAM_WEBHOOK_PATH
              value: {{ .path }}
            {{- end }}
            {{- end }}
            - name: API_TELEGRAM_WEBHOOK_PORT
              value: "{{ .Values.service.port }}"
            - name: API_TELEGRAM_TOKEN
              value: "{{ .Values.api.telegram.token }}"
            - name: CHATS_DB_URI
              value: "{{ .Values.chats.db.protocol }}://{{ .Values.chats.db.hostname }}/?retryWrites=true&w=majority"
            - name: CHATS_DB_NAME
              value: {{ .Values.chats.db.name }}
            - name: CHATS_DB_USERNAME
              value: {{ .Values.chats.db.username }}
            {{- if .Values.chats.db.password.secret.enabled }}
            - name: CHATS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.chats.db.password.secret.name }}"
                  key: "{{ .Values.chats.db.password.secret.key }}"
            {{- else }}
            - name: CHATS_DB_PASSWORD
              value: "{{ .Values.chats.db.password.raw }}"
            {{- end }}
            - name: CHATS_DB_TABLE_NAME
              value: {{ .Values.chats.db.table.name }}
            - name: CHATS_DB_TLS_ENABLED
              value: "{{ .Values.chats.db.tls.enabled }}"
            - name: CHATS_DB_TLS_INSECURE
              value: "{{ .Values.chats.db.tls.insecure }}"
            - name: LOG_LEVEL
              value: "{{ .Values.log.level }}"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: "/healthz"
              port: {{ .Values.service.port }}
          readinessProbe:
            httpGet:
              path: "/healthz"
              port: {{ .Values.service.port }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: server-cert
              mountPath: "/etc/server-cert"
              readOnly: true
      volumes:
        - name: server-cert
          secret:
            secretName: secret-bot-telegram-tls-server
            items:
              - key: tls.crt
                path: tls.crt
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
